source("C:/Users/User/Downloads/msm_example.R")
source("C:/Users/User/Downloads/msm_example.R")
# PACKAGES -------------------------------------------------------------
library(data.table)   # fast data manipulation
library(ipw)          # inverse probability of treatment weighting
library(geepack)      # GEE for MSM
set.seed(8675309)     # reproducibility
# DESIGN PARAMETERS ----------------------------------------------------
n <- 1000     # patients
K <- 6        # semi-annual visits (3 years)
# SIMULATE BASELINE CD4 -----------------------------------------------
baseline_cd4 <- rnorm(n, mean = 500, sd = 100)
# BUILD PERSON-PERIOD LONG FORMAT --------------------------------------
d <- data.table(
id = rep(1:n, each = K),
t  = rep(0:(K - 1), times = n)
)
# PREP LAGGED CD4 HOLDER
d[ , cd4_prev := ifelse(t == 0, baseline_cd4[id], NA_real_)]
# SIMULATE LONGITUDINAL TREATMENT & CD4 --------------------------------
for (k in 0:(K - 1)) {
# ART more likely when current CD4 low
d[t == k, art := rbinom(.N, 1, plogis(-3 + 0.003 * cd4_prev))]
# CD4 trajectory: natural decline mitigated by ART
d[t == k, cd4 := cd4_prev - rnorm(.N, 40, 20) + 60 * art]
# propagate CD4 to next period
if (k < K - 1) {
d[t == k, cd4_next := cd4]
d[t == k + 1, cd4_prev := d[t == k, cd4_next]]
}
}
d[ , cd4_next := NULL]
# CALCULATE LAGGED TREATMENT (HISTORY) ---------------------------------
d[ , art_lag1 := shift(art, type = "lag"), by = id]
wt <- ipwpoint(exposure    = art,
family      = "binomial",
link        = "logit",
numerator   = ~ art_lag1,
denominator = ~ art_lag1 + cd4_prev,
id          = id,
timevar     = t,
data        = d,
trunc       = 0.01)
d
d[ , art_lag1 := shift(art, type = "lag", fill = 0), by = id]
# INVERSE-PROBABILITY WEIGHTS ------------------------------------------
wt <- ipwpoint(exposure    = art,
family      = "binomial",
link        = "logit",
numerator   = ~ art_lag1,
denominator = ~ art_lag1 + cd4_prev,
id          = id,
timevar     = t,
data        = d,
trunc       = 0.01)
d
DESIGN PARAMETERS ----------------------------------------------------
n <- 1000     # patients
K <- 6        # semi-annual visits (3 years)
# SIMULATE BASELINE CD4 -----------------------------------------------
baseline_cd4 <- rnorm(n, mean = 500, sd = 100)
# BUILD PERSON-PERIOD LONG FORMAT --------------------------------------
d <- data.table(
id = rep(1:n, each = K),
t  = rep(0:(K - 1), times = n)
)
# PREP LAGGED CD4 HOLDER
d[ , cd4_prev := ifelse(t == 0, baseline_cd4[id], NA_real_)]
# SIMULATE LONGITUDINAL TREATMENT & CD4 --------------------------------
for (k in 0:(K - 1)) {
# ART more likely when current CD4 low
d[t == k, art := rbinom(.N, 1, plogis(-3 + 0.003 * cd4_prev))]
# CD4 trajectory: natural decline mitigated by ART
d[t == k, cd4 := cd4_prev - rnorm(.N, 40, 20) + 60 * art]
# propagate CD4 to next period
if (k < K - 1) {
d[t == k, cd4_next := cd4]
d[t == k + 1, cd4_prev := d[t == k, cd4_next]]
}
}
d[ , cd4_next := NULL]
# CALCULATE LAGGED TREATMENT (HISTORY) ---------------------------------
d[ , art_lag1 := shift(art, type = "lag", fill = 0), by = id]
# INVERSE-PROBABILITY WEIGHTS ------------------------------------------
wt <- ipwpoint(exposure    = art,
family      = "binomial",
link        = "logit",
numerator   = ~ art_lag1,
denominator = ~ art_lag1 + cd4_prev,
id          = id,
timevar     = t,
data        = d,
trunc       = 0.01)
wt <- ipwpoint(exposure    = art,
family      = "binomial",
link        = "logit",
numerator   = ~ art_lag1,
denominator = ~ art_lag1 + cd4_prev,
id          = id,
timevar     = t,
data        = as.data.frame(d),
trunc       = 0.01)
as.data.frame(d)
as.data.frame(d)$id
wt <- ipwpoint(exposure    = art,
family      = "binomial",
link        = "logit",
numerator   = ~ art_lag1,
denominator = ~ art_lag1 + cd4_prev,
id          = "id",
timevar     = "t",
data        = as.data.frame(d),
trunc       = 0.01)
?ipwpoint
wt <- ipwpoint(exposure    = art,
family      = "binomial",
link        = "logit",
numerator   = ~ art_lag1,
denominator = ~ art_lag1 + cd4_prev,
# id          = "id",
# timevar     = "t",
data        = as.data.frame(d),
trunc       = 0.01)
d[ , sw := wt$ipw.weights]
print(summary(d$sw))
# CUMULATIVE ART EXPOSURE ----------------------------------------------
d[ , cum_art := cumsum(art), by = id]
# FIT MARGINAL STRUCTURAL MODEL ----------------------------------------
msm_fit <- geeglm(cd4 ~ cum_art + I(t/2) + baseline_cd4,
id      = id,
weights = sw,
corstr  = "independence",
data    = d)
head(d)
msm_fit <- geeglm(cd4 ~ cum_art + I(t/2) + baseline_cd4,
id      = id,
weights = sw,
corstr  = "independence",
data    = as.data.frame(d))
msm_fit <- geeglm(cd4 ~ cum_art + I(t/2) + cd4_prev,
id      = id,
weights = sw,
corstr  = "independence",
data    = as.data.frame(d))
print(summary(msm_fit))
naive_fit <- geeglm(cd4 ~ cum_art + I(t/2) + cd4_prev,
id     = id,
corstr = "independence",
data   = d)
cat("\nCausal (MSM) vs naive beta for cum_art:\n")
print(c(MSM = coef(msm_fit)["cum_art"], Naive = coef(naive_fit)["cum_art"]))
msm_fit <- geeglm(cd4 ~ cum_art + I(t/2) ,
id      = id,
weights = sw,
corstr  = "independence",
data    = as.data.frame(d))
print(summary(msm_fit))
# NAIVE (UNWEIGHTED) COMPARISON ----------------------------------------
naive_fit <- geeglm(cd4 ~ cum_art + I(t/2),
id     = id,
corstr = "independence",
data   = d)
cat("\nCausal (MSM) vs naive beta for cum_art:\n")
print(c(MSM = coef(msm_fit)["cum_art"], Naive = coef(naive_fit)["cum_art"]))
source("C:/Users/User/Downloads/msm_example_fixed.R")
source("C:/Users/User/Downloads/msm_example_fixed.R")
true_effect <- 60
est_msm     <- coef(msm_fit)["cum_art"]
est_naive   <- coef(naive_fit)["cum_art"]
cat("True ART effect per timepoint:     ", true_effect, "\n")
cat("Estimated by MSM (IPTW adjusted):  ", round(est_msm, 2), "\n")
cat("Estimated by naive model:          ", round(est_naive, 2), "\n")
source("C:/Users/User/Downloads/msm_example_fixed.R")
source("C:/Users/User/Downloads/msm_example_fixed.R")
source("C:/Users/User/Downloads/msm_example_fixed.R")
source("C:/Users/User/Downloads/msm_example_fixed.R")
source("C:/Users/User/Downloads/msm_example_fixed.R")
source("C:/Users/User/Downloads/msm_example_fixed.R")
source("C:/Users/User/Downloads/msm_example_fixed.R")
source("C:/Users/User/Downloads/msm_example_fixed.R")
source("C:/Users/User/Downloads/msm_example_fixed.R")
source("C:/Users/User/Downloads/msm_example_fixed.R")
source("C:/Users/User/Downloads/msm_example_fixed.R")
source("C:/Users/User/Downloads/msm_example_fixed.R")
source("C:/Users/User/Downloads/msm_example_fixed.R")
source("C:/Users/User/Downloads/msm_example_fixed.R")
source("C:/Users/User/Downloads/msm_example_fixed.R")
source("C:/Users/User/Downloads/msm_example_fixed.R")
source("C:/Users/User/Downloads/msm_example_fixed.R")
source("C:/Users/User/Downloads/msm_example_fixed.R")
source("~/Optimal Control with Causal Agents/Chapter1/msm_example_fixed.R")
source("~/Optimal Control with Causal Agents/Chapter1/msm_example_fixed.R")
source("~/Optimal Control with Causal Agents/Chapter1/msm_example_fixed.R")
source("~/Optimal Control with Causal Agents/Chapter1/msm_example_fixed.R")
msm_fit <- geeglm(cd4 ~ cum_art + I(t/2) + baseline_cd4,
id      = id,
weights = sw,
corstr  = "independence",
data    = as.data.frame(d))
print(summary(msm_fit))
msm_ar1_fit <- geeglm(cd4 ~ cum_art + I(t/2) + baseline_cd4,
id      = id,
weights = sw,
corstr  = "ar(1)",
data    = as.data.frame(d))
msm_ar1_fit <- geeglm(cd4 ~ cum_art + I(t/2) + baseline_cd4,
id      = id,
weights = sw,
corstr  = "ar1",
data    = as.data.frame(d))
print(summary(msm_ar1_fit))
# NAIVE (UNWEIGHTED) COMPARISON ----------------------------------------
naive_fit <- geeglm(cd4 ~ cum_art + I(t/2)+baseline_cd4,
id     = id,
corstr = "independence",
data   = d)
true_effect <- 60
est_msm     <- coef(msm_fit)["cum_art"]
est_ar1msm <- coef(msm_ar1_fit)["cum_art"]
est_naive   <- coef(naive_fit)["cum_art"]
cat("True ART effect per timepoint:     ", true_effect, "\n")
cat("Estimated by MSM (IPTW adjusted with AR1):  ", round(est_ar1_msm, 2), "\n")
est_ar1_msm <- coef(msm_ar1_fit)["cum_art"]
est_naive   <- coef(naive_fit)["cum_art"]
cat("True ART effect per timepoint:     ", true_effect, "\n")
cat("Estimated by MSM (IPTW adjusted with AR1):  ", round(est_ar1_msm, 2), "\n")
cat("Estimated by MSM (IPTW adjusted):  ", round(est_msm, 2), "\n")
ca
cat("Estimated by naive model:          ", round(est_naive, 2), "\n")
msm_ar1_fit <- geeglm(cd4 ~ cum_art + I(t/2) + baseline_cd4,
id      = id,
#weights = sw,
corstr  = "ar1",
data    = as.data.frame(d))
print(summary(msm_ar1_fit))
# NAIVE (UNWEIGHTED) COMPARISON ----------------------------------------
naive_fit <- geeglm(cd4 ~ cum_art + I(t/2)+baseline_cd4,
id     = id,
corstr = "independence",
data   = d)
true_effect <- 60
est_msm     <- coef(msm_fit)["cum_art"]
est_ar1_msm <- coef(msm_ar1_fit)["cum_art"]
est_naive   <- coef(naive_fit)["cum_art"]
cat("True ART effect per timepoint:     ", true_effect, "\n")
cat("Estimated by MSM (IPTW adjusted with AR1):  ", round(est_ar1_msm, 2), "\n")
cat("Estimated by MSM (IPTW adjusted):  ", round(est_msm, 2), "\n")
cat("Estimated by naive model:          ", round(est_naive, 2), "\n")
source("~/Optimal Control with Causal Agents/Chapter1/msm_example_fixed.R")
source("~/Optimal Control with Causal Agents/Chapter1/msm_example_fixed.R")
source("~/Optimal Control with Causal Agents/Chapter1/msm_example_fixed.R")
source("~/Optimal Control with Causal Agents/Chapter1/msm_example_fixed.R")
source("~/Optimal Control with Causal Agents/Chapter1/msm_example_fixed.R")
source("~/Optimal Control with Causal Agents/Chapter1/msm_example_fixed.R")
source("~/Optimal Control with Causal Agents/Chapter1/msm_example_fixed.R")
source("~/Optimal Control with Causal Agents/Chapter1/msm_example_fixed.R")
source("~/Optimal Control with Causal Agents/Chapter1/msm_example_fixed.R")
source("~/Optimal Control with Causal Agents/Chapter1/msm_example_fixed.R")
source("C:/Users/User/Downloads/ar1_vs_msm_failure_demo.R")
set.seed(123)
# PARAMETERS
n <- 1000
K <- 6
# SIMULATE DATA WITH TIME-DEPENDENT CONFOUNDING
baseline_cd4 <- rnorm(n, 500, 100)
d <- data.table(id = rep(1:n, each = K),
t = rep(0:(K-1), n))
d[ , baseline_cd4 := rep(baseline_cd4, each = K)]
d[ , cd4_prev := ifelse(t == 0, baseline_cd4, NA_real_)]
for (k in 0:(K - 1)) {
# Confounding: low CD4 -> higher chance of ART
d[t == k, art := rbinom(.N, 1, plogis(-2 + 0.004 * (400 - cd4_prev)))]
# Outcome: ART raises CD4 by true effect = 60
d[t == k, cd4 := cd4_prev - rnorm(.N, 40, 20) + 60 * art]
if (k < K - 1) {
d[t == k, cd4_next := cd4]
d[t == k + 1, cd4_prev := d[t == k, cd4_next]]
}
}
d[ , cd4_next := NULL]
d[ , art_lag1 := shift(art, fill = 0), by = id]
# MSM: IP weights
d_df <- as.data.frame(d)
wt <- ipwpoint(
exposure    = art,
family      = "binomial",
link        = "logit",
numerator   = ~ art_lag1,
denominator = ~ art_lag1 + cd4_prev,
id          = id,
timevar     = t,
data        = d_df,
trunc       = 0.01
)
head(d)
head(d_df)
set.seed(123)
# PARAMETERS
n <- 1000
K <- 6
# SIMULATE DATA WITH TIME-DEPENDENT CONFOUNDING
baseline_cd4 <- rnorm(n, 500, 100)
d <- data.table(id = rep(1:n, each = K),
t = rep(0:(K-1), n))
d[ , baseline_cd4 := rep(baseline_cd4, each = K)]
d[ , cd4_prev := ifelse(t == 0, baseline_cd4, NA_real_)]
for (k in 0:(K - 1)) {
# Confounding: low CD4 -> higher chance of ART
d[t == k, art := rbinom(.N, 1, plogis(-2 + 0.004 * (400 - cd4_prev)))]
# Outcome: ART raises CD4 by true effect = 60
d[t == k, cd4 := cd4_prev - rnorm(.N, 40, 20) + 60 * art]
if (k < K - 1) {
d[t == k, cd4_next := cd4]
d[t == k + 1, cd4_prev := d[t == k, cd4_next]]
}
}
d[ , cd4_next := NULL]
d[ , art_lag1 := shift(art, fill = 0), by = id]
# MSM: IP weights
d_df <- as.data.frame(d)
wt <- ipwpoint(
exposure    = art,
family      = "binomial",
link        = "logit",
numerator   = ~ art_lag1,
denominator = ~ art_lag1 + cd4_prev,
id          = id,
timevar     = t,
data        = d_df,
trunc       = 0.01
)
head(d_df)
wt <- ipwpoint(
exposure    = art,
family      = "binomial",
link        = "logit",
numerator   = ~ art_lag1,
denominator = ~ art_lag1 + cd4_prev,
#id          = id,
#timevar     = t,
data        = d_df,
trunc       = 0.01
)
d$sw <- wt$ipw.weights
d[ , cum_art := cumsum(art), by = id]
# MSM fit with AR(1)
msm_ar1 <- geeglm(cd4 ~ cum_art + I(t/2) + baseline_cd4,
weights = sw,
#id = id,
data = d,
corstr = "ar1")
# MSM fit with AR(1)
msm_ar1 <- geeglm(cd4 ~ cum_art + I(t/2) + baseline_cd4,
weights = sw,
id = id,
data = d,
corstr = "ar1")
# AR(1) naive model (no weighting)
naive_ar1 <- geeglm(cd4 ~ cum_art + I(t/2) + baseline_cd4,
id = id,
data = d, corstr = "ar1")
# MSM fit with independence
msm_indep <- geeglm(cd4 ~ cum_art + I(t/2) + baseline_cd4,
weights = sw,
id = id,
data = d,
corstr = "independence")
# TRUE EFFECT
true_effect <- 60
cat("True treatment effect per ART unit:", true_effect, "\n")
cat("Estimated by naive AR(1):           ", round(coef(naive_ar1)["cum_art"], 2), "\n")
cat("Estimated by MSM (indep):           ", round(coef(msm_indep)["cum_art"], 2), "\n")
cat("Estimated by MSM + AR(1):           ", round(coef(msm_ar1)["cum_art"], 2), "\n")
